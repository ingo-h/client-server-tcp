#ifndef UPNPLIB_INCLUDE_PORT_SOCK_HPP
#define UPNPLIB_INCLUDE_PORT_SOCK_HPP
// Copyright (C) 2021+ GPL 3 and higher by Ingo HÃ¶ft, <Ingo@Hoeft-online.de>
// Redistribution only with this Copyright remark. Last modified: 2023-03-29

// clang-format off

// Make sockets portable
// ---------------------
#ifdef _MSC_VER
  #include <fcntl.h>
  #include <winsock2.h>
  #include <iphlpapi.h> // must be after <winsock2.h>
  #include <ws2tcpip.h> // for getaddrinfo, socklen_t etc.

  // _MSC_VER has SOCKET defined but unsigned and not a file descriptor.
  #define sa_family_t ADDRESS_FAMILY
  #define CLOSE_SOCKET_P(s) do { ::closesocket((s)); (s)=INVALID_SOCKET; } while ( 0 )

  // For shutdown() send/receive on a socket there are other constant names.
  #define SHUT_RD SD_RECEIVE
  #define SHUT_WR SD_SEND
  #define SHUT_RDWR SD_BOTH

#else

  #include <sys/socket.h>
  #include <sys/select.h>
  #include <arpa/inet.h>
  #include <unistd.h> // Also needed here to use 'close()' for a socket.
  #include <netdb.h>  // for getaddrinfo etc.

  // This typedef makes the code slightly more WIN32 tolerant. On WIN32 systems,
  // SOCKET is unsigned and is not a file descriptor.
  typedef int SOCKET;
  // Posix has sa_family_t defined.
  #define CLOSE_SOCKET_P(s) do { ::close((s)); (s)=INVALID_SOCKET; } while ( 0 )

  // socket() returns INVALID_SOCKET on win32 and is unsigned.
  #define INVALID_SOCKET (-1)
  // some function returns SOCKET_ERROR on win32.
  #define SOCKET_ERROR (-1)
#endif

// clang-format on

namespace upnplib {

// Initialize and cleanup Microsoft Windows Sockets
// ------------------------------------------------
#ifdef _MSC_VER
class CWSAStartup {
  public:
    CWSAStartup();
    virtual ~CWSAStartup();
};
#define WINSOCK_INIT_P CWSAStartup winsock_init;
#else
#define WINSOCK_INIT_P
#endif


// Wrap socket() system call
// -------------------------
// To copy a socket doesn't make sense. So this class only supports moving a
// socket. After moving, the moved-from object is still valid but contains an
// INVALID_SOCKET. It can be destructed successful.
// Reference:
// [What is move semantics?](https://stackoverflow.com/q/3106110/5014688)
class CSocket {
  public:
    // Constructor
    CSocket();

    // Copy constructor
    // not generated by default with custom move member functions. We want to
    // restrict to only move the resource.
    // CSocket(const CSocket&);

    // Move constructor
    // Constructor
    CSocket(CSocket&&);

    // Assignment operator
    // With parameter as value this is used as copy- and move-assignment
    // operator. The correct usage (move) is evaluated by the compiler. Here
    // only the move constructor can be used (there is no copy constructor) to
    // move the parameter to the function body.
    CSocket& operator=(CSocket);

    // Destructor
    virtual ~CSocket();

    // Setter for the socket
    void set(int domain, int type, int protocol);

    // Get the socket, e.g.: CSocket sock; SOCKET sfd = sock;
    operator SOCKET&();

  private:
    SOCKET fd{INVALID_SOCKET};
};

} // namespace upnplib

#endif // UPNPLIB_INCLUDE_PORT_SOCK_HPP
